#!/bin/bash

#######################################
# FUNCTIONS
#######################################

# Run an artisan command
artisan () {
  docker compose run --rm mrcb php artisan "${@:1}" "${@:2}"
}

test() {
  docker compose exec mrcb php artisan test "${@:1}"
}

# Build all of the images or the specified one
build () {
    docker compose build "${@:1}"
}

# Run a Composer command
composer () {
    docker compose run --rm mrcb composer "${@:1}"
}

# Remove the entire Docker environment
destroy () {
    read -p "This will delete containers, volumes and images. Are you sure? [y/N]: " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then exit; fi
    docker compose down -v --rmi all --remove-orphans
}

# Stop and destroy all containers
down () {
    docker compose down "${@:1}"
}

# Create and start the containers and volumes
start () {
    docker compose up -d
}

# Stop the containers
stop () {
    docker compose stop
}

# Display and tail the logs of all containers or the specified one's
logs () {
    docker compose logs -f "${@:1}"
}

# Restart the containers
restart () {
    stop && start
}

#######################################
# MENU
#######################################
case "$1" in
    artisan)
        artisan "${@:2}" "${@:3}"
        ;;
    test)
        test "${@:2}"
        ;;
    build)
        build "${@:2}"
        ;;
    composer)
        composer "${@:2}" "${@:3}"
        ;;
    destroy)
        destroy
        ;;
    down)
        down "${@:2}"
        ;;
    logs)
        logs "${@:2}"
        ;;
    restart)
        restart
        ;;
    start)
        start
        ;;
    stop)
        stop
        ;;
    *)
        cat << EOF

Command line interface for the Docker-based web development environment demo.

Usage:
    mrcb <command> [options] [arguments]

Available commands:
    artisan ................................... Run an Artisan command
    test ...................................... Runs test on the meniaga-api backend
                                                Options:
                                                  --filter ............... Specify which test to run
    build [image] ............................. Build all of the images or the specified one
    composer .................................. Run a Composer command
    destroy ................................... Remove the entire Docker environment
    down [-v] ................................. Stop and destroy all containers
                                                Options:
                                                    -v .................... Destroy the volumes as well
    init ...................................... Initialise the Docker environment and the application
    logs [container] .......................... Display and tail the logs of all containers or the specified one's
    restart ................................... Restart the containers
    start ..................................... Start the containers
    stop ...................................... Stop the containers
    update .................................... Update the Docker environment
EOF
        exit 1
        ;;
esac
